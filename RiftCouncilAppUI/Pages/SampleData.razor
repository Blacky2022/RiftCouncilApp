@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>Sample Data</h3>

@if (categoriesCreated)
{
	<h4>Categories have been created</h4>
} 
else
{
	<button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
	<h4>Statuses have been created</h4>
}
else
{
	<button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>
@code {
	private bool categoriesCreated = false;
	private bool statusesCreated = false;

	private async Task CreateCategories()
	{
		var categories = await categoryData.GetAllCategories();

		if(categories?.Count > 0)
		{
			return;
		}

		CategoryModel cat = new()
		{
			CategoryName = "Hextech",
				CategoryDescription = "Everything about hextech workshop"
		};
		await categoryData.CreateCategory(cat);

		cat = new()
			{
				CategoryName = "Champions",
				CategoryDescription = "Deep dive into champion info"
			};
		await categoryData.CreateCategory(cat);

		cat = new()
			{
				CategoryName = "Balance",
				CategoryDescription = "About balancing the game"
			};
		await categoryData.CreateCategory(cat);
		cat = new()
			{
				CategoryName = "Other",
				CategoryDescription = "Not sure where to fit this"
			};
		await categoryData.CreateCategory(cat);
		
		categoriesCreated = true;
	}
	private async Task CreateStatuses()
	{
		var statuses = await statusData.GetAllStatuses();
		
		if (statuses?.Count > 0)
		{
			return;
		}
		StatusModel stat= new()
			{
				StatusName = "Completed",
				StatusDescription = "Suggestion completed"
			};
		await statusData.CreateStatus(stat);
		stat = new()
			{
				StatusName = "Watching",
				StatusDescription = "Suggestion is being watched"
			};
		await statusData.CreateStatus(stat);
		stat = new()
			{
				StatusName = "Upcoming",
				StatusDescription = "Suggestion is incoming in next patches"
			};
		await statusData.CreateStatus(stat);

		stat = new()
			{
				StatusName = "Dismissed",
				StatusDescription = "Suggestion is dismissed"
			};
		await statusData.CreateStatus(stat);
		
		statusesCreated = true;
	}
	
	private async Task GenerateSampleData()
	{
		UserModel user = new()
			{
				FirstName = "Maciej",
				LastName = "Marcula",
				EmailAddress = "Maciek@test.com",
				DisplayName = "Sample Maciej Marcula",
				ObjectIdentifier = "abc-123",
			};
		await userData.CreateUser(user);

		var foundUser = await userData.GetUserFromAuthentication("abc-123");
		var categories = await categoryData.GetAllCategories();
		var statuses = await statusData.GetAllStatuses();

		HashSet<string> votes = new();


		SuggestionModel suggestion = new()
			{
				Author = new BasicUserModel(foundUser),
				Category = categories[0],
				Suggestion = "First suggestion",
				Description = "This is the first suggestion",
				SuggestionStatus = statuses[1],
				OwnerNotes = "Owner notes",
			};

		await suggestionData.CreateSuggestion(suggestion);

		votes.Add("5");
		votes.Add("3");
		votes.Add("1");

		suggestion = new()
			{
				Author = new BasicUserModel(foundUser),
				Category = categories[1],
				Suggestion = "Third suggestion",
				Description = "This is the third suggestion",
				SuggestionStatus = statuses[2],
				UserVotes = votes,
				OwnerNotes = "Owner notes",
			};

		await suggestionData.CreateSuggestion(suggestion);

		suggestion = new()
			{
				Author = new BasicUserModel(foundUser),
				Category = categories[2],
				Suggestion = "Fourth suggestion",
				Description = "This is the fourth suggestion",
				SuggestionStatus = statuses[3],
				OwnerNotes = "Owner notes",
			};

		await suggestionData.CreateSuggestion(suggestion);

		votes.Add("4");

		suggestion = new()
			{
				Author = new BasicUserModel(foundUser),
				Category = categories[3],
				Suggestion = "Fifth suggestion",
				Description = "This is the fifth suggestion",
				SuggestionStatus = statuses[4],
				UserVotes = votes,
				OwnerNotes = "Owner notes",
			};

		await suggestionData.CreateSuggestion(suggestion);

	}

}
 